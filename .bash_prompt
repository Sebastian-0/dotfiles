#!/bin/bash

# Hello         
SEP_R='' 
SEP_L=''
SEG_R=''
SEG_L=''

R='\e[0m'
COL_STATUS_OK='\e[32m'
COL_STATUS_ERR='\e[38;5;124m'
COL_TIME='\e[37m'
COL_HOST='\e[33m'
COL_DIR='\e[37m'

# Timer functionality courtesy of Nicolas Thery:
# https://stackoverflow.com/a/34812608
function timer_now {
    date +%s%N
}

function timer_start {
    # Only run for commands not in the prompt, otherwise the timer shows the wrong value
    if [[ "$PROMPT_COMMAND" != *$BASH_COMMAND* ]]; then
        timer_start=${timer_start:-$(timer_now)}
    fi
}

function timer_stop {
    local now
    now=$(timer_now)
    # The timer is not started in case of Ctrl+C, make time diff == 0
    if [ -z "$timer_start" ]; then
        timer_start="$now"
    fi
    local delta_us=$(((now - timer_start) / 1000))
    local us=$((delta_us % 1000))
    local ms=$(((delta_us / 1000) % 1000))
    local s=$(((delta_us / 1000000) % 60))
    local m=$(((delta_us / 60000000) % 60))
    local h=$((delta_us / 3600000000))
    # Goal: always show around 3 digits of accuracy
    if ((h > 0)); then
        timer_show=${h}h${m}m
    elif ((m > 0)); then
        timer_show=${m}m${s}s
    elif ((s >= 10)); then
        timer_show=${s}.$((ms / 100))s
    elif ((s > 0)); then
        timer_show=${s}.$(printf %03d $ms)s
    elif ((ms >= 100)); then
        timer_show=${ms}ms
    elif ((ms > 0)); then
        timer_show=${ms}.$((us / 100))ms
    else
        timer_show=${us}µs
    fi
    unset timer_start
}

function _seb_prompt() {
    local exit="$?"
    timer_stop
    if [ "$exit" = "0" ]; then
        local ret="\[$R${COL_STATUS_OK}\][ 󰄬 ]"
    else
        local ret="\[$R${COL_STATUS_ERR}\][  $exit ]"
    fi
    time="\[$R$COL_TIME\]($timer_show) \t"
    host="\[$R$COL_HOST\][\u@\h]"
    dir="\[$R$COL_DIR\]\w"
    prompt="\[$R\]\$"
    PS1="\n┌$ret $time $host $dir\n$prompt "
}
if [[ "$PROMPT_COMMAND" != *_seb_prompt* ]]; then
    trap 'timer_start' DEBUG
    export PROMPT_COMMAND="$PROMPT_COMMAND; _seb_prompt"
fi
