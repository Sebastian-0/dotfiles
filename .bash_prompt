#!/bin/bash
root_path="$(dirname -- "${BASH_SOURCE[0]}")"

. "$root_path/utils/ssh_env.sh"

# Hello         
SEP_R='' 
SEP_L=''
SEG_R=''
SEG_L=''

R='\e[0m'
COL_STATUS_OK='\e[32m'
COL_STATUS_ERR='\e[38;5;124m'
COL_TIME='\e[37m'
COL_HOST='\e[33m'
COL_SSH_ERR='\e[38;5;124m'
COL_SSH_LOCKED='\e[38;5;208m'
COL_SSH_UNLOCKED='\e[32m'
COL_GIT='\e[38;5;12m'
COL_DIR='\e[37m'

# Timer functionality courtesy of Nicolas Thery:
# https://stackoverflow.com/a/34812608
function timer_now {
    date +%s%N
}

function timer_start {
    # Only run for commands not in the prompt, otherwise the timer shows the wrong value
    if [[ "$PROMPT_COMMAND" != *$BASH_COMMAND* ]]; then
        timer_start=${timer_start:-$(timer_now)}
    fi
}

function timer_stop {
    local now
    now=$(timer_now)
    # The timer is not started in case of Ctrl+C, make time diff == 0
    if [ -z "$timer_start" ]; then
        timer_start="$now"
    fi
    local delta=$((now - timer_start))
    timer_show="$( # Subshell to avoid leaking sourced symbols
        . "$root_path/utils/time.sh"
        nanos_to_str $delta
    )"
    unset timer_start
}

function _seb_prompt() {
    local exit="$?"
    timer_stop
    if [ "$exit" = "0" ]; then
        local ret="\[$R${COL_STATUS_OK}\][ 󰄬 ] "
    else
        local ret="\[$R${COL_STATUS_ERR}\][  $exit ] "
    fi

    local start
    if [ ! -f "$SSH_ADD_TIME" ]; then
        start=0
    else
        start="$(cat "$SSH_ADD_TIME")"
    fi
    local current="$(date +%s%N)"
    local delta=$((SSH_ADD_EXPIRY_SECONDS * 1000000000 - (current - start)))
    local ssh
    if ! ps -A | grep ssh-agent$ > /dev/null; then
        # No SSH agent is running at all
        ssh="\[$R$COL_SSH_ERR\]< 󰻌 -- > "
    elif ! ssh-add -l > /dev/null || [ "$delta" -lt 0 ]; then
        # No key registered, or key expired
        ssh="\[$R$COL_SSH_LOCKED\]< 󰦞 -- > "
    else
        local ssh_expiry_time="$( # Subshell to avoid leaking sourced symbols
            . "$root_path/utils/time.sh"
            nanos_to_str $delta
        )"
        ssh="\[$R$COL_SSH_UNLOCKED\]< 󰕥 $ssh_expiry_time > "
    fi

    local time="\[$R$COL_TIME\]($timer_show) \t "
    local host
    if [ -n "$SSH_CONNECTION" ]; then
        host="\[$R$COL_HOST\][\u@\h] "
    else
        host="\[$R$COL_HOST\][\u@] "
    fi
    local gt=""
    if git status &> /dev/null; then
        local provider="󰊢"
        # local repo="$(basename "$(git rev-parse --show-toplevel)")"
        local remote_repo="$(git config --get remote.origin.url)"
        if [ -n "$remote_repo" ]; then
            #     repo="$(basename -s .git "$remote_repo")"
            if [[ "$remote_repo" = *github.com* ]]; then
                provider=󰊤
            fi
            if [[ "$remote_repo" = *bitbucket.com* ]]; then
                provider=󰠄
            fi
            if [[ "$remote_repo" = *gitlab.com* ]]; then
                provider=󰮠
            fi
        fi

        local branch="$(git branch --show-current)"
        if [ -z "$branch" ]; then
            branch="DETACHED"
        fi
        # gt="($provider $repo $branch) "
        gt="\[$R$COL_GIT\]($provider $branch) "
    fi
    local dir="\[$R$COL_DIR\]\w"
    local prompt="\[$R\]\$"
    PS1="\n┌$ret$time$host$gt$ssh$dir\n$prompt "
}
if [[ "$PROMPT_COMMAND" != *_seb_prompt* ]]; then
    trap 'timer_start' DEBUG
    if [ -z "$PROMPT_COMMAND" ]; then
        export PROMPT_COMMAND="_seb_prompt"
    else
        export PROMPT_COMMAND="$PROMPT_COMMAND; _seb_prompt"
    fi
fi
